buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath 'org.ajoberstar:gradle-git:1.1.0'
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
	}
}

def getProperty = { property ->
	if (!project.hasProperty(property)) {
		throw new GradleException("${property} property must be set")
	}
	return project.property(property)
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.ajoberstar.github-pages'
apply plugin: 'signing'

group = "com.pusher"
version = "1.8.1.1"
sourceCompatibility = "1.6"
targetCompatibility = "1.6"
def buildVersion = "1.8.0"

ext.sharedManifest = manifest {
	attributes(
		"Created-By"			: 'Pusher',
		'Implementation-Vendor'	: 'Pusher',
		'Implementation-Title'	: 'Pusher Java Websocket API Example',
		'Implementation-Version': version,
		'Package'				: 'com.pusher.client.example',
		'Main-Class'			: 'com.pusher.client.example.ExampleApp'
	)
}


repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	compile "com.google.code.gson:gson:2.8.0"
	compile "org.java-websocket:Java-WebSocket:1.3.8"
	testCompile "org.mockito:mockito-all:1.8.5"
	testCompile "org.powermock:powermock-module-junit4:1.4.11"
	testCompile "org.powermock:powermock-api-mockito:1.4.11"
}


processResources {
	filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
		version: buildVersion
	] )
}


javadoc {
	/* info for JavaDoc options http://docs.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html#overviewcomment */
	title "Pusher Java Websocket API"
	options.overview = file("src/main/javadoc/overview.html")
	// uncomment this to use the custom javadoc styles
	//options.stylesheetFile = file("src/main/javadoc/css/styles.css")
	exclude "**/com/pusher/client/channel/impl/*"
	exclude "**/com/pusher/client/connection/impl/*"
	exclude "**/com/pusher/client/connection/websocket/*"
	exclude "**/org/java_websocket/*"
	exclude "**/com/pusher/client/example/*"
	options.linkSource = true
}


jar {
	manifest = project.manifest {
		from sharedManifest
	}
}

def pomConfig = {
	licenses {
		license {
			name "MIT"
			url "http://www.opensource.org/licenses/mit-license.php"
			distribution "repo"
		}
	}
	developers {
		developer {
			id "blokaly"
			name "Blokaly"
			email "blokaly@users.noreply.github.com"
		}
	}

	scm {
		url "https://github.com/finfabrik/pusher-websocket-java"
	}
}

publishing {
	publications {
		mavenPublication(MavenPublication) {
			from components.java
			groupId project.group
			artifactId 'pusher-java-client'
			version project.version
			pom.withXml {
				def root = asNode()
				root.appendNode('description', 'Pusher java client fork')
				root.appendNode('name', 'pusher-java-client')
				root.appendNode('url', 'https://github.com/finfabrik/pusher-websocket-java')
				root.children().last() + pomConfig
			}
		}
	}
}

bintray {
	user = System.getProperty('bintray.user')
	key = System.getProperty('bintray.key')
	publications = ['mavenPublication']

	pkg {
		repo = 'pusher'
		name = 'pusher-java-client'
		licenses = ['MIT']
		vcsUrl = 'https://github.com/finfabrik/pusher-websocket-java.git'
		version {
			name = project.version
			desc = project.version
			released  = new Date()
		}
	}

}

task fatJar(type: Jar, dependsOn:configurations.runtime) {
	manifest = project.manifest {
		from sharedManifest
	}
	baseName = project.name + '-with-dependencies'
	from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
	classifier = 'jar-with-dependencies'
}
assemble.dependsOn fatJar


task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}
assemble.dependsOn sourcesJar


task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}
assemble.dependsOn javadocJar


githubPages {
	repoUri = 'https://github.com/pusher/pusher-websocket-java.git'
	pages {
		from javadoc.outputs.files
	}
	commitMessage = "JavaDoc gh-pages for ${version}"
	credentials {
		username = { getProperty("github.username") }
		password = { getProperty("github.password") }
	}
}


signing {
	required { gradle.taskGraph.hasTask("uploadArchives") }
	sign configurations.archives
}

artifacts {
	archives jar, fatJar, sourcesJar, javadocJar
}

task createPublishTarget doLast {
	uploadArchives { repositories { mavenDeployer {
		beforeDeployment {
			MavenDeployment deployment -> signing.signPom(deployment)
		}
		repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
			authentication(
				userName: getProperty("maven.username"),
				password: getProperty("maven.password")
			)
		}
		snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
			authentication(
				userName: getProperty("maven.username"),
				password: getProperty("maven.password")
			)
		}
		pom.project {
			name 'Pusher Java Client Library'
			packaging 'jar'
			artifactId 'pusher-java-client'
			description 'This is a Java client library for Pusher, targeted at core Java and Android.'
			url 'http://github.com/pusher/pusher-websocket-java'
			scm {
				connection 'scm:git:git@github.com:pusher/pusher-websocket-java'
				developerConnection 'scm:git:git@github.com:pusher/pusher-websocket-java'
				url 'http://github.com/pusher/pusher-websocket-java'
			}
			licenses {
				license {
					name 'MIT'
					url 'https://raw.github.com/pusher/pusher-websocket-java/master/LICENCE.txt'
					distribution 'https://raw.github.com/pusher/pusher-websocket-java/mvn-repo/'
				}
			}
			organization {
				name 'Pusher'
				url 'http://pusher.com'
			}
			issueManagement {
				system 'GitHub'
				url 'https://github.com/pusher/pusher-websocket-java/issues'
			}
			developers {
				developer {
					id 'mike'
					name 'Mike Pye'
					email 'mike@pusher.com'
				}
			}
		}
	}}}
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.4.1'
}
